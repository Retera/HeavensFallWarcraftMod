//===========================================================================
// 
// Coastrunner Rush
// 
//   Warcraft III AI script
//   Generated by the Warcraft III World Editor
//   Date: Mon Dec 12 21:42:22 2011
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    integer                 attackWave                 = 1
    integer                 nextDelay                  = 0
    integer                 awGold                     = 0
    integer                 awWood                     = 0
    boolean bringWar = false
endglobals

//***************************************************************************
//*
//*  Utility Functions
//*
//***************************************************************************

function SetBuildWarUnit takes integer qty, integer unitid returns nothing
    if bringWar then
        call SetBuildUnit(qty,unitid)
    endif
endfunction

function SetBuildWarAll takes integer t, integer qty, integer unitid, integer town returns nothing
    if bringWar then
        call SetBuildAll(t,qty,unitid,town)
    endif
endfunction
function SetBuildWarNext takes integer qty, integer unitid returns nothing
    if bringWar then
        call SetBuildNext(qty,unitid)
    endif
endfunction

//===========================================================================
function CheckLastCommand takes boolean pop returns integer
    local integer cmd = GetLastCommand()
    if (pop) then
        call PopLastCommand(  )
    endif
    return cmd
endfunction

//===========================================================================
function CheckLastCommandData takes boolean pop returns integer
    local integer data = GetLastData()
    if (pop) then
        call PopLastCommand(  )
    endif
    return data
endfunction

//===========================================================================
function TotalFoodProduced takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

//===========================================================================
function ExpansionNeeded takes nothing returns boolean
    return take_exp
endfunction

//===========================================================================
function BuildExpansion takes integer hallID, integer mineID returns nothing
    if (HallsCompleted(hallID)) then
        call SetBuildExpa( TownCount(hallID) + 1, mineID )
    endif
endfunction

//===========================================================================
function CurrentAttackWave takes nothing returns integer
    return attackWave
endfunction

//===========================================================================
function ResetAttackUnits takes nothing returns nothing
    set awGold = 0
    set awWood = 0
    call InitAssaultGroup(  )
endfunction

//===========================================================================
function AddAttackUnit takes integer minQty, integer maxQty, integer unitID returns nothing
    // Track attacking gold workers
    if (unitID == 'ewsp') then
        set awGold = awGold + minQty
    endif

    // Track attacking wood workers
    if (unitID == 'ewsp') then
        set awWood = awWood + minQty
    endif

    call SetAssaultGroup( minQty, maxQty, unitID )
endfunction

//***************************************************************************
//*
//*  Basic Options
//*
//***************************************************************************

//===========================================================================
function InitOptions takes nothing returns nothing
    call SetMeleeAI(  )
    call SetDefendPlayer( true )
    call SetRandomPaths( false )
    call SetTargetHeroes( true )
    call SetPeonsRepair( true )
    call SetHeroesFlee( true )
    call SetHeroesBuyItems( true )
    call SetUnitsFlee( true )
    call SetGroupsFlee( true )
    call SetWatchMegaTargets( true )
    call SetIgnoreInjured( true )
    call SetHeroesTakeItems( true )
    call SetSlowChopping( false )
    call SetCaptainChanges( false )
    call SetSmartArtillery( true )
endfunction

//***************************************************************************
//*
//*  Conditions
//*
//***************************************************************************

//===========================================================================
// Updates the values of all preset conditions
//===========================================================================
function UpdateConditions takes nothing returns nothing
    if( GetLastCommand() == 5 ) then
        set bringWar = true
    endif
endfunction

//***************************************************************************
//*
//*  Heroes
//*
//***************************************************************************

//===========================================================================
// Stores hero ID and skills
//===========================================================================
function SetHero takes integer order, integer heroid returns nothing
    if (order == 1) then
        set hero_id = heroid
        if (heroid == 'Edem') then
            set skills1[ 1] = 'A0CA'
            set skills1[ 2] = 'A0JM'
            set skills1[ 3] = 'A02I'
            set skills1[ 4] = 'A0CA'
            set skills1[ 5] = 'A0JM'
            set skills1[ 6] = 'AOvd'
            set skills1[ 7] = 'A02I'
            set skills1[ 8] = 'A0CA'
            set skills1[ 9] = 'A0JM'
            set skills1[10] = 'A02I'
        endif
    endif
endfunction

//===========================================================================
// Selects hero IDs for three possible heroes
//===========================================================================
function SelectHeroes takes nothing returns nothing
    local integer roll = GetRandomInt(1,100)
    call SetHero( 1, 'Edem' )
endfunction

//===========================================================================
// Returns the hero skill for the given hero and level
//===========================================================================
function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()

    if (level > max_hero_level) then
        set max_hero_level = level
    endif

    if (curHero == hero_id) then
        return skills1[level]
    elseif (curHero == hero_id2) then
        return skills2[level]
    elseif (curHero == hero_id3) then
        return skills3[level]
    endif
    return 0
endfunction

//***************************************************************************
//*
//*  Building and Harvesting
//*
//***************************************************************************

//===========================================================================
// Specifies building priorities for workers
//===========================================================================
function BuildPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    call SetBuildAll( BUILD_UNIT, 1, 'etol', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'eaom', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'eate', -1 )
    call SetBuildAll( BUILD_UNIT, 7, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 8, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 9, 'ewsp', -1 )
    call SetBuildWarAll( BUILD_UNIT, 1, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 10, 'ewsp', -1 )
    call SetBuildWarAll( BUILD_UNIT, 1, hero_id, -1 )
    call SetBuildWarAll( BUILD_UNIT, 2, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 11, 'ewsp', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'eaom', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'edob', -1 )
    call SetBuildWarAll( BUILD_UNIT, 3, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 4, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 5, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 6, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'etoa', -1 )
    call SetBuildWarAll( BUILD_UNIT, 7, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 8, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 9, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'eaom', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Resm', -1 )
    call SetBuildAll( BUILD_UNIT, 7, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 8, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 10, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 11, 'earc', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rema', -1 )
    call SetBuildAll( BUILD_UNIT, 9, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 12, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 13, 'earc', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Resm', -1 )
    call SetBuildAll( BUILD_UNIT, 10, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'eaom', -1 )
    call BuildExpansion( 'nntt', 'nntt' )
    call SetBuildWarAll( BUILD_UNIT, 14, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 15, 'earc', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rema', -1 )
    call SetBuildAll( BUILD_UNIT, 11, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 16, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 17, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'etoe', -1 )
    call SetBuildAll( BUILD_UNIT, 12, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 13, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 18, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 19, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 20, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'e01A', -1 )
    call SetBuildAll( BUILD_UNIT, 14, 'emow', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Remk', -1 )
    call SetBuildWarAll( BUILD_UNIT, 21, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 22, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 15, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 23, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 24, 'earc', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Reib', -1 )
    call SetBuildAll( BUILD_UPGRADE, 3, 'Resm', -1 )
    call SetBuildAll( BUILD_UPGRADE, 3, 'Rema', -1 )
    call SetBuildWarAll( BUILD_UNIT, 25, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 26, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 16, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'edos', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'edos', -1 )
    call SetBuildWarAll( BUILD_UNIT, 27, 'earc', -1 )
    call SetBuildWarAll( BUILD_UNIT, 28, 'earc', -1 )
    call SetBuildAll( BUILD_UNIT, 17, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 18, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 1, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 2, 'n020', -1 )
    call SetBuildAll( BUILD_UNIT, 19, 'emow', -1 )
    call SetBuildAll( BUILD_UNIT, 20, 'emow', -1 )
    call SetBuildWarAll( BUILD_UNIT, 3, 'n020', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'R025', -1 )
    call SetBuildWarAll( BUILD_UNIT, 4, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 5, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 6, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 7, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 8, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 9, 'n020', -1 )
    call SetBuildWarAll( BUILD_UNIT, 10, 'n020', -1 )
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
//===========================================================================
function HarvestPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    local integer allGold = GetUnitCountDone('ewsp')
    local integer allWood = GetUnitCountDone('ewsp')
    local integer numWorkers
    set numWorkers = 5
    call HarvestGold( 0, numWorkers )
    set numWorkers = 5
    call HarvestWood( 0, numWorkers )
    set numWorkers = 5
    call HarvestGold( 1, numWorkers )
    set numWorkers = 4
    call HarvestWood( 0, numWorkers )
endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================
function WorkerAssignment takes nothing returns nothing
    loop
        call UpdateConditions(  )

        // Harvesting
        call ClearHarvestAI(  )
        call HarvestPriorities(  )

        // Building
        call InitBuildArray(  )
        call BuildPriorities(  )

        call Sleep( 2 )
    endloop
endfunction

//***************************************************************************
//*
//*  Attacking
//*
//***************************************************************************

//===========================================================================
// Returns true if the minimum forces for an attack exist
//===========================================================================
function HaveMinimumAttackers takes nothing returns boolean
    local integer count

    // Check for attack wave limit
    if (attackWave > 1) then
        return false
    endif

    // First Hero Only
    if (GetUnitCountDone(hero_id) < 1) then
        return false
    endif

    return true
endfunction

//===========================================================================
// Assigns units to attack based on the given attack group
//===========================================================================
function PrepareAttackGroup takes integer groupID returns nothing
    local integer all

    // Attack Group #1: All Units
    if (groupID == 1) then
        set all = GetUnitCountDone( hero_id )
        call AddAttackUnit( all, all, hero_id )
        set all = GetUnitCountDone( hero_id2 )
        call AddAttackUnit( all, all, hero_id2 )
        set all = GetUnitCountDone( hero_id3 )
        call AddAttackUnit( all, all, hero_id3 )
        set all = GetUnitCountDone( 'earc' )
        call AddAttackUnit( all, all, 'earc' )

    endif
endfunction

//===========================================================================
// Prepares an attack group based on the current attack wave
//===========================================================================
function PrepareForces takes nothing returns nothing
    if (attackWave == 1) then
        call PrepareAttackGroup( 1 )
    endif
endfunction

//===========================================================================
// Sleep delays for each attack wave
//===========================================================================
function AttackWaveDelay takes integer inWave returns nothing
    if (inWave < nextDelay) then
        return
    endif

    set nextDelay = inWave + 1
endfunction

//===========================================================================
// Advances attack wave counter
//===========================================================================
function AttackWaveUpdate takes nothing returns nothing
    call AttackWaveDelay( attackWave )
    set attackWave = attackWave + 1
    if (attackWave > 1) then
        set attackWave = 1
        set nextDelay = attackWave + 1
    endif
endfunction

//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if (target == null) then
        return
    endif
    if (addAlliance) then
        call SetAllianceTarget( target )
    endif
    call FormGroup( 3, true )
    call AttackMoveKillA( target )
    if (not addAlliance) then
        call SetAllianceTarget( null )
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true

    // Don't launch any attack while town is threatened
    if (TownThreatened()) then
        call Sleep( 2 )
        return
    endif

    // Target Priority #1
    if (target == null) then
        set target = GetAllianceTarget()
        if (target != null) then
            set setAlly = false
        endif
    endif

    // Target Priority #2
    if (target == null) then
        set target = GetMegaTarget()
    endif

    // Target Priority #3
    if (target == null) then
        set target = GetEnemyExpansion()
    endif

    // Target Priority #4
    if (target == null) then
        set target = GetEnemyExpansion()
        if (target == null) then
            call StartGetEnemyBase(  )
            loop
                exitwhen (not WaitGetEnemyBase())
                call SuicideSleep( 1 )
            endloop
            set target = GetEnemyBase()
        endif
    endif

    // Target Priority #5
    if (target == null) then
        set target = GetCreepCamp( 0, 9, false )
    endif

    // Attack the target and increment attack wave
    if (target != null) then
        call AttackTarget( target, setAlly )
        call AttackWaveUpdate(  )
    else
        // If no target was found, sleep a bit before trying again
        call Sleep( 20 )
    endif
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================
function AttackAssignment takes nothing returns nothing
    call StaggerSleep( 0, 2 )
    if (attackWave == 1) then
        call AttackWaveDelay( 0 )
    endif
    loop
        loop
            call UpdateConditions(  )
            exitwhen (HaveMinimumAttackers() and not CaptainRetreating())
            call Sleep( 2 )
        endloop
        call RemoveInjuries(  )
        call ResetAttackUnits(  )
        call PrepareForces(  )
        call LaunchAttack(  )
    endloop
endfunction

//***************************************************************************
//*
//*  Main Entry Point
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call InitAI(  )
    call InitOptions(  )
    call SelectHeroes(  )
    call CreateCaptains(  )
    call SetHeroLevels( function ChooseHeroSkill )

    call Sleep( 0.1 )
    call StartThread( function WorkerAssignment )
    call StartThread( function AttackAssignment )
    call PlayGame(  )
endfunction

